@page "/Demo Ordering Page/catalog"
@inject ProductsApiService ProductAPI
@inject NavigationManager _navigationManager
@inject HttpClient Http

<div class="row mb-5">
    <div class="col">
        <button class="btn btn-primary" @onclick='() =>_navigationManager.NavigateTo("/Demo Ordering Page/create-product")'>New Product</button>
    </div>
    <div class="col">
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
    </div>
</div>

@if (ProductList == null)
{
    <p>Loading.......</p>
}
else if (ProductList.Count == 0)
{
    <p>No products available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ProductId</th>
                <th>ProductName</th>
                <th>Category</th>
                <th>UnitPrice</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ProductList)
            {
                <tr>
                    <td>@item.ProductId</td>
                    <td>@item.ProductName</td>
                    <td>@item.Category</td>
                    <td>@item.UnitPrice</td>
                    <td>@item.Description</td>
                    <td style="white-space:nowrap">
                        <button class="btn btn-primary btn-sm" @bind-="@item.ProductId" onclick="DeleteProduct">Update</button>
                        @* asp-route-id="@item.ProductId" *@
                        <button class="btn btn-danger btn-sm" asp-route-id="@item.ProductId">Delete</button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {


    private List<ProductsListResponse>? ProductList;
    private string? ErrorMessage;
    private int ProductId;
    private string ResponseMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ProductList = await ProductAPI.GetProductsAsync();
            if (ProductList == null)
            {
                Console.WriteLine("No products returned from the API.");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to load products. Please try again later.";
            Console.Error.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    // private int Update(int ProductId){
    //     throw Exception("There is a issue going on here");
    // }



    private async Task DeleteProduct()
    {
        var response = await Http.DeleteAsync($"http://localhost:5163/api/controller/DeleteProducts?ProductId={ProductId}");
        if(response.IsSuccessStatusCode)
        {
            ResponseMessage = $"The Product {ProductId} was deleted successfully";
        }else{
            ResponseMessage = "Failed to Delete the product.";
        }
    }
    // void CreateNewProduct()
    // {
    //     UriHelper.
    //     // Handle navigation or logic for creating a new product
    // }

    
}
