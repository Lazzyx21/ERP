@page "/Demo Ordering Page/products"
@inject ProductsApiService ProductAPI

<h3>Product Details</h3>

@if (product == null)
{
    <p>Loading product details...</p>
}
else
{
    <div>
        <p><strong>Product ID:</strong> @product.ProductId</p>
        <p><strong>Product Name:</strong> @product.ProductName</p>
        <p><strong>Category:</strong> @product.Category</p>
        <p><strong>Unit Price:</strong> @product.UnitPrice</p>
        <p><strong>Description:</strong> @product.Description</p>
    </div>
}

@code {
    // [Parameter]
    // public int ProductId { get; set; }

    private List<ProductsListResponse>? ProductList;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ProductList = await ProductAPI.GetProductsAsync();
            if (ProductList == null)
            {
                Console.WriteLine("No products returned from the API.");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to load products. Please try again later.";
            Console.Error.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private void CreateNewProduct()
    {
        Console.WriteLine("Redirecting to create product page...");
        // Handle navigation or logic for creating a new product
    }
}
